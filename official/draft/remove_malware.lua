--[[
    Infocyte Extension
    Name: Removes malware
    Type: Action
    Description: Kills persistence and running malware
    Author: Infocyte
    Guid: 2a7e0aff-c47c-45f7-8065-580689f89ad2
    Created: 20200123
    Updated: 20200123 (Gerritz)
--]]

--[[ SECTION 1: Inputs --]]

processes_to_kill = {

}
registrykeys_to_delete = {

}
files_to_delete = {

}


--[[ SECTION 2: Functions --]]

-- FileSystem Functions --
function path_exists(path)
    --[[
        Check if a file or directory exists in this path. 
        Input:  [string]path -- Add '/' on end of the path to test if it is a folder
        Output: [bool] Exists
                [string] Error message -- only if failed
    ]] 
   local ok, err = os.rename(path, path)
   if not ok then
      if err == 13 then
         -- Permission denied, but it exists
         return true
      end
   end
   return ok, err
end

function get_filename(path)
    match = path:match("^.+[\\/](.+)$")
    return match
end

-- Infocyte Powershell Functions --
posh = {}
function posh.run_cmd(command)
    --[[
        Input:  [String] Small Powershell Command
        Output: [Bool] Success
                [String] Output
    ]]
    if not hunt.env.has_powershell() then
        hunt.error("Powershell not found.")
        throw "Powershell not found."
    end

    if not command or (type(command) ~= "string") then 
        hunt.error("Required input [String]command not provided.")
        throw "Required input [String]command not provided."
    end

    print("Initiatializing Powershell to run Command: "..command)
    cmd = ('powershell.exe -nologo -nop -command "& {'..command..'}"')
    pipe = io.popen(cmd, "r")
    output = pipe:read("*a") -- string output
    ret = pipe:close() -- success bool
    return ret, output
end

function posh.run_script(psscript)
    --[[
        Input:  [String] Powershell script. Ideally wrapped between [==[ ]==] to avoid possible escape characters.
        Output: [Bool] Success
                [String] Output
    ]]
    if not hunt.env.has_powershell() then
        hunt.error("Powershell not found.")
        throw "Powershell not found."
    end

    if not psscript or (type(psscript) ~= "string") then 
        hunt.error("Required input [String]script not provided.")
        throw "Required input [String]script not provided."
    end

    print("Initiatializing Powershell to run Script")
    tempfile = os.getenv("systemroot").."\\temp\\icpowershell.log"

    -- Pipeline is write-only so we'll use transcript to get output
    script = '$Temp = [System.Environment]::GetEnvironmentVariable("TEMP","Machine")\n'
    script = script..'Start-Transcript -Path "'..tempfile..'" | Out-Null\n'
    script = script..psscript
    script = script..'\nStop-Transcript\n'

    pipe = io.popen("powershell.exe -noexit -nologo -nop -command -", "w")
    pipe:write(script)
    ret = pipe:close() -- success bool

    -- Get output
    file, err = io.open(tempfile, "r")
    if file then
        output = file:read("*all") -- String Output
        file:close()
        os.remove(tempfile)
    else 
        hunt.error("Powershell script failed to run: "..err)
    end
    return ret, output
end

-- PowerForensics (optional)
function posh.install_powerforensics()
    --[[
        Checks for NuGet and installs Powerforensics
        Output: [bool] Success
    ]]
    if not posh then 
        hunt.error("Infocyte's posh lua functions are not available. Add Infocyte's posh.* functions.")
        throw "Error"
    end
    script = [==[
        # Download/Install PowerForensics
        $n = Get-PackageProvider -name NuGet
        if ($n.version.major -lt 2) {
            if ($n.version.minor -lt 8) {
                Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Scope CurrentUser -Force
            }
        }
        if (-NOT (Get-Module -ListAvailable -Name PowerForensics)) {
            Write-Host "Installing PowerForensics"
            Install-Module -name PowerForensics -Scope CurrentUser -Force
        }
    ]==]
    ret, output = posh.run_script(script)
    if ret then 
        hunt.debug("Powershell Succeeded:\n"..output)
    else 
        hunt.error("Powershell Failed:\n"..output)
    end
    return ret
end

--[[ SECTION 3: Actions --]]

host_info = hunt.env.host_info()
osversion = host_info:os()
hunt.debug("Starting Extention. Hostname: " .. host_info:hostname() .. ", Domain: " .. host_info:domain() .. ", OS: " .. host_info:os() .. ", Architecture: " .. host_info:arch())

-- Kill Processes
s = ''
for i, v in ipairs(processes_to_kill) do
    s = s.."\nTerm["..i.."]: "..v -- concatenate key/value pairs
end
hunt.log("Finding and killing processes that match the following search terms (name, path, or pid):"..s)

kill_list = {}
-- List running processes
e = {}
procs = hunt.process.list()
for _, proc in pairs(procs) do
    procpath = string.lower(proc:path())
    procname = get_filename(procpath) or 'error'
    if procname == 'error' then
        table.insert(e, proc:pid())
        hunt.verbose("Could not access pid "..proc:pid()..": "..proc:path()..". Normal for a system process.") 
        goto continue
    end   

    -- Search procs for your list of kill keywords (name, pid, path)
    for _, item in ipairs(processes_to_kill) do
        if (type(item) == 'number') and (proc:pid() == item) then 
            hunt.verbose("Found PID: "..item)
            kill_list[proc:pid()] = proc
        elseif (type(item) == 'string') then
            if string.find(procname, item:lower()) or (procpath == item:lower()) then 
                hunt.verbose("Found name/path: "..item)
                kill_list[proc:pid()] = proc
            end
        end
    end
    ::continue::
end

-- Kill processes
n = 0
for pid, proc in pairs(kill_list) do
    out, err = hunt.process.kill_pid(pid)
    if out then
        n = n + 1
        hunt.log("Killed "..get_filename(proc:path()).." [pid: "..proc:pid().."] with image path: "..proc:path())
    else 
        hunt.error("Could not kill "..get_filename(proc:path()).." [pid: "..proc:pid().."] with image path "..proc:path()..": "..err)
    end
end

hunt.log("Killed "..n.." processes. "..(#kill_list-n).." failed.")

s = nil
for _, v in ipairs(e) do
    if not s then 
        s = v
    else 
        s = s..","..v -- concatenate key/value pairs
    end
end
hunt.verbose("Could not retrieve info for "..#e.." locked system processes with pids: {"..s.."}")


-- All OS-specific instructions should be behind an 'if' statement
if hunt.env.is_windows() then
    -- Insert your Windows Code


elseif hunt.env.is_macos() then
    -- Insert your MacOS Code


elseif hunt.env.is_linux() or hunt.env.has_sh() then
    -- Insert your POSIX-compatible (linux) Code


else
    hunt.warn("Not a compatible operating system for this extension [" .. host_info:os() .. "]")
end
