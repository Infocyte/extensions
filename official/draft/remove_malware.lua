--[[
    Infocyte Extension
    Name: Removes malware
    Type: Action
    Description: Kills persistence and running malware
    Author: Infocyte
    Created: 20200123
    Updated: 20200123 (Gerritz)
]]--

-- SECTION 1: Inputs (Variables)
processname = ''
registrykeys_to_delete = ''

----------------------------------------------------
-- SECTION 2: Functions


function install_powerforensic()
    local debug = debug or true
    script = [==[
        # Download/Install PowerForensics
        $n = Get-PackageProvider -name NuGet
        if ($n.version.major -lt 2) {
            if ($n.version.minor -lt 8) {
                Install-PackageProvider -Name NuGet -MinimumVersion 2.8.5.201 -Scope CurrentUser -Force
            }
        }
        if (-NOT (Get-Module -ListAvailable -Name PowerForensics)) {
            Write-Host "Installing PowerForensics"
            Install-Module -name PowerForensics -Scope CurrentUser -Force
        }
    ]==]
    if not hunt.env.has_powershell() then
        hunt.error("Powershell not found.")
        return nil
    end

    -- Make tempdir
    logfolder = os.getenv("temp").."\\ic"
    os.execute("mkdir "..logfolder)

    -- Create powershell process and feed script+commands to its stdin
    print("Initiatializing PowerForensics")
    logfile = logfolder.."\\pslog.log"
    local pipe = io.popen("powershell.exe -noexit -nologo -nop -command - > "..logfile, "w")
    pipe:write(script) -- load up powershell functions and vars (Powerforensics)
    r = pipe:close()
    if debug then
        local file,msg = io.open(logfile, "r")
        if file then
            hunt.debug("Powershell Output (Success="..tostring(r).."):\n"..file:read("*all"))
        end
        file:close()
        os.remove(logfile)
    end
    return true
end

function path_exists(path)
    -- Check if a file or directory exists in this path
    -- add '/' on end to test if it is a folder
   local ok, err, code = os.rename(path, path)
   if not ok then
      if code == 13 then
         -- Permission denied, but it exists
         return true
      end
   end
   return ok, err
end


function execute_ps(command)
    print("Initiatializing Powershell")
    cmd = ('powershell.exe -nologo -nop -command "& {'..command..'}"')
    pipe = io.popen(cmd, "r")
    r = pipe:close()
    return pipe
end

----------------------------------------------------
-- SECTION 3: Actions

host_info = hunt.env.host_info()
osversion = host_info:os()
hunt.debug("Starting Extention. Hostname: " .. host_info:hostname() .. ", Domain: " .. host_info:domain() .. ", OS: " .. host_info:os() .. ", Architecture: " .. host_info:arch())


-- All OS-specific instructions should be behind an 'if' statement
if hunt.env.is_windows() then
    -- Insert your Windows Code


elseif hunt.env.is_macos() then
    -- Insert your MacOS Code


elseif hunt.env.is_linux() or hunt.env.has_sh() then
    -- Insert your POSIX-compatible (linux) Code


else
    hunt.warn("Not a compatible operating system for this extension [" .. host_info:os() .. "]")
end


hunt.log('Malware has been removed')
